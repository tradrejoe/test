<?xml version='1.0' encoding='UTF-8'?>
<!-- Schema file written by PDE -->
<schema targetNamespace="org.eclipse.m2e" xmlns="http://www.w3.org/2001/XMLSchema">
<annotation>
      <appinfo>
         <meta.schema plugin="org.eclipse.m2e" id="projectConfigurators" name="Project Configurators"/>
      </appinfo>
      <documentation>
         Project Configurators
      </documentation>
   </annotation>

   <element name="extension">
      <annotation>
         <appinfo>
            <meta.element />
         </appinfo>
      </annotation>
      <complexType>
         <sequence minOccurs="1" maxOccurs="unbounded">
            <element ref="configurator"/>
         </sequence>
         <attribute name="point" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
               <appinfo>
                  <meta.attribute translatable="true"/>
               </appinfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="configurator">
      <annotation>
         <documentation>
            Project configurator.

Project Configurators are sorted during lifecycle mapping execution, per the runsAfter/runsBefore attributes : 
- once in the scope of a mojo execution, during a full/incremental build
- once before project configuration updates (after collecting configurators from all mojo executions)
         </documentation>
      </annotation>
      <complexType>
         <attribute name="id" type="string" use="required">
            <annotation>
               <documentation>
                  Unique configurator id
               </documentation>
            </annotation>
         </attribute>
         <attribute name="class" type="string" use="required">
            <annotation>
               <documentation>
                  Configurator implementation
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn="org.eclipse.m2e.core.project.configurator.AbstractProjectConfigurator:"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  Configurator name, eg. &quot;JDT&quot;, &quot;PDE&quot;, &quot;AJDT&quot;, &quot;WTP&quot;, etc.
               </documentation>
               <appinfo>
                  <meta.attribute translatable="true"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="secondaryTo" type="string">
            <annotation>
               <documentation>
                  DEPRECATED : use runsAfter instead.

Id of primary project configurator that must be enabled for a plugin execution in order for this (secondary) configurator to be enabled. One and only one primary configurator must be enable for each interesting plugin execution, but any number of secondary project configurators are allowed. Primary configurator will be invoked before its corresponding secondary configurators, if any, but invocation order among secondary configurators is not specified.
               </documentation>
               <appinfo>
                  <meta.attribute kind="identifier" basedOn="org.eclipse.m2e.core.projectConfigurators/configurator/@id" deprecated="true"/>
               </appinfo>
            </annotation>
         </attribute>
         <attribute name="runsAfter" type="string">
            <annotation>
               <documentation>
                  Optional comma-separated list of ids of required project configurators this project configurator should run after. By default, if one of the runsAfter configurators is missing/can not be executed, this configurator will be skipped. However, configurator ids suffixed with a ? are considered optional. This configurator will be invoked even if optional configurators it should run after are missing.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="runsBefore" type="string">
            <annotation>
               <documentation>
                  Optional comma-separated list of ids of optional project configurators this configurator should run before.  By default, this configurator will be invoked even if configurators it should run before are missing. However, configurator ids suffixed with a * are considered required. If any of the required &quot;runBefore&quot; configurators is missing, this configurator will be skipped.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <annotation>
      <appinfo>
         <meta.section type="since"/>
      </appinfo>
      <documentation>
         0.9.4
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="examples"/>
      </appinfo>
      <documentation>
         [Enter extension point usage example here.]
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="apiinfo"/>
      </appinfo>
      <documentation>
         [Enter API information here.]
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="implementation"/>
      </appinfo>
      <documentation>
         [Enter information about supplied implementation of this extension point.]
      </documentation>
   </annotation>

   <annotation>
      <appinfo>
         <meta.section type="copyright"/>
      </appinfo>
      <documentation>
         Copyright (c) 2007-2015 Sonatype, Inc and others.
  All rights reserved. This program and the accompanying materials
  are made available under the terms of the Eclipse Public License 2.0
  which accompanies this distribution, and is available at
  https://www.eclipse.org/legal/epl-2.0/

  SPDX-License-Identifier: EPL-2.0
      </documentation>
   </annotation>

</schema>
